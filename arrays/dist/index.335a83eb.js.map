{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// BANKIST APP\n\n// Data\nconst account1 = {\n  owner: 'Jonas Schmedtmann',\n  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n};\n\nconst account3 = {\n  owner: 'Steven Thomas Williams',\n  movements: [200, -200, 340, -300, -20, 50, 400, -460],\n  interestRate: 0.7,\n  pin: 3333,\n};\n\nconst account4 = {\n  owner: 'Sarah Smith',\n  movements: [430, 1000, 700, 50, 90],\n  interestRate: 1,\n  pin: 4444,\n};\n\nconst accounts = [account1, account2, account3, account4];\n\n// Elements\nconst labelWelcome = document.querySelector('.welcome');\nconst labelDate = document.querySelector('.date');\nconst labelBalance = document.querySelector('.balance__value');\nconst labelSumIn = document.querySelector('.summary__value--in');\nconst labelSumOut = document.querySelector('.summary__value--out');\nconst labelSumInterest = document.querySelector('.summary__value--interest');\nconst labelTimer = document.querySelector('.timer');\n\nconst containerApp = document.querySelector('.app');\nconst containerMovements = document.querySelector('.movements');\n\nconst btnLogin = document.querySelector('.login__btn');\nconst btnTransfer = document.querySelector('.form__btn--transfer');\nconst btnLoan = document.querySelector('.form__btn--loan');\nconst btnClose = document.querySelector('.form__btn--close');\nconst btnSort = document.querySelector('.btn--sort');\n\nconst inputLoginUsername = document.querySelector('.login__input--user');\nconst inputLoginPin = document.querySelector('.login__input--pin');\nconst inputTransferTo = document.querySelector('.form__input--to');\nconst inputTransferAmount = document.querySelector('.form__input--amount');\nconst inputLoanAmount = document.querySelector('.form__input--loan-amount');\nconst inputCloseUsername = document.querySelector('.form__input--user');\nconst inputClosePin = document.querySelector('.form__input--pin');\n\n/////////////////////////////////////////////////\n\n// creating usernames using .map() method\naccounts.forEach(account => {\n  account.username = account.owner.toLowerCase().split(\" \").map(item => item[0]).join(\"\");\n});\n\n\n// creating movements for account1 and replacing the pre-coded default html\n// removing the pre-coded default html\n\n// creating a function to display movements\nconst displayMovements = function(movements, sort=false){\n  containerMovements.innerHTML = \"\";  // to remove default coded html\n\n  const movs = sort? movements.slice().sort((a, b) => a - b) : movements; // we do not want to change the original array. So, create a copy with .slice()\n\n  movs.forEach((mov, i) => {\n\n    const type = mov > 0? \"deposit\" : \"withdrawal\";\n\n    const html = `\n    <div class=\"movements__row\">\n          <div class=\"movements__type movements__type--${type}\">${i + 1} ${type}</div>\n          <div class=\"movements__value\">${mov}€</div>\n        </div>\n    `;\n    containerMovements.insertAdjacentHTML('afterbegin', html);\n\n  });\n};\n\n\n// creating a function for calculating and displaying balance\nconst calcDisplayBalance = function(acc) {\n  acc.balance = acc.movements.reduce((arr, mov) => arr + mov,  0);\n  labelBalance.textContent = `${acc.balance} €`;\n};\n\n\n\n// creating functions to display total incomes, withdrawals and interests\nconst calcDisplaySummary = function(account){\n  const incomes = account.movements\n    .filter(mov => mov > 0)\n    .reduce((acc, mov) => acc + mov, 0);\n  labelSumIn.textContent = `${incomes} €`;\n\n  const out = account.movements\n    .filter(mov => mov < 0)\n    .reduce((acc, mov) => acc + mov, 0);\n  labelSumOut.textContent = `${Math.abs(out)} €`;\n\n  const interest =  account.movements\n    .filter(mov => mov > 0)\n    .map(deposit => deposit * account.interestRate/100)\n    .filter(int => int >= 1)   // if the bank ony adds interest if the interest value is > 1 euro\n    .reduce((acc, int) => acc + int, 0);\n  labelSumInterest.textContent = `${interest} €`;\n};\n\n\n// updating UI function\nconst updateUI = function(acc){\n    // display movements\n    displayMovements(currentAccount.movements); \n    \n    // display balance\n    calcDisplayBalance(currentAccount);\n    \n    // display summary\n    calcDisplaySummary(currentAccount);\n};\n\n\n\n// Initiating a currentAccount variable\nlet currentAccount;\n\n// Event handlers for User login\n// when we click a button in 'form' element, the event listener gets executed and the page always reloads by default \nbtnLogin.addEventListener('click', function(event){\n  event.preventDefault();   // prevents form from submitting (reloading every time a button gets clicked)\n  \n  currentAccount = accounts.find(acc => acc.username === inputLoginUsername.value);\n  \n  if (currentAccount?.pin === Number(inputLoginPin.value)) {\n    \n    // display UI and welcome message\n    labelWelcome.textContent = `Welcome back ${currentAccount.owner.split(\" \")[0]}!`;\n    containerApp.style.opacity = 100;\n    \n    // clear the input fields\n    inputLoginUsername.value = inputLoginPin.value = \"\";\n    \n    // removing focus from input fields after logging in by using .blur() method on the element\n    inputLoginPin.blur(); \n    \n    // updating UI\n    updateUI(currentAccount);\n  };\n});\n\n\n// Event handlers/listeners for transfers\nbtnTransfer.addEventListener('click', function(e){\n  e.preventDefault();   // preventing the default submitting \n\n  const receiverAcc = accounts.find(acc => acc.username === inputTransferTo.value);\n  const amount = Number(inputTransferAmount.value);\n\n  // clearing input fields\n  inputTransferAmount.value = inputTransferTo.value = \"\";\n\n  if (\n    amount > 0 &&\n    receiverAcc &&\n    amount <= currentAccount.balance &&\n    receiverAcc.username !== currentAccount.username\n    ){\n\n      // doing the transfer\n      currentAccount.movements.push(-amount);\n      receiverAcc.movements.push(amount);\n\n      // updating UI\n      updateUI(currentAccount);\n    };\n});\n\n\n// Event handler for loan request\nbtnLoan.addEventListener('click', function(e){\n  e.preventDefault();\n\n  const loanValue = Number(inputLoanAmount.value);\n\n  if (loanValue > 0 && currentAccount.movements.some(mov => mov >= loanValue/10)){\n    // adding new load value to account movements\n    currentAccount.movements.push(loanValue);\n    // updating UI\n    updateUI(currentAccount);\n  };\n  // clearing input field values with or without the loan\n  inputLoanAmount.value = \"\";\n});\n\n\n\n// Event handler for close account \nbtnClose.addEventListener('click', function (e) {\n  e.preventDefault();\n\n  if (inputCloseUsername.value === currentAccount.username && Number(inputClosePin.value) === currentAccount.pin){\n    const index = accounts.findIndex(acc => acc.username === currentAccount.username);\n\n    // deleting message to the console\n    console.log(`Deleting ${accounts[index].owner.split(' ')[0]}'s account`);\n\n    // deleting the account using slice\n    accounts.splice(index, 1);\n\n    // hide UI and welcome message\n    labelWelcome.textContent = `Login again to get started...`;\n    containerApp.style.opacity = 0;\n  };\n\n  // clearing input fields for both right or wrong entries\n  inputClosePin.value = inputCloseUsername.value = \"\";\n\n});\n\n\nlet checkSort = true;\n// Event handler for Sorting movements\nbtnSort.addEventListener('click', function(e){\n  e.preventDefault();\n\n  displayMovements(currentAccount.movements, checkSort);\n  checkSort = !checkSort;\n});\n\n\n\n\n/////////////////////////////////////////////////\n// LECTURES\n\nconst currencies = new Map([\n  ['USD', 'United States dollar'],\n  ['EUR', 'Euro'],\n  ['GBP', 'Pound sterling'],\n]);\n\n/////////////////////////////////////////////////\nconst movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\n\n// // changing the 'movements' element based on the passed element (in this case the movements array for example)\n// document.querySelector('.movements').innerHTML = \"\";\n\n// movements.forEach((mov, i) => {\n\n//   const movType = mov > 0? \"deposit\" : \"withdrawal\";\n\n//   const anotherHTML = `\n//   <div class=\"movements__row\">\n//           <div class=\"movements__type movements__type--${movType}\">${i + 1} ${movType}</div>\n//           <div class=\"movements__date\">3 days ago</div>\n//           <div class=\"movements__value\">${mov}</div>\n//         </div>\n//   `;\n//   document.querySelector('.movements').insertAdjacentHTML('afterbegin', anotherHTML);\n// });\n\n\n// using .find() method\n// console.log(accounts);\n// const account =  accounts.find(acc => acc.owner === \"Jessica Davis\");\n// console.log(account);\n\n\n// using .flat()  method to calculate the overall movement of all the accounts in the bank\n// const allMovements = accounts\n//     .map(acc => acc.movements)\n//     .flat()\n//     .reduce((acc, mov) => acc + mov, 0);\n// console.log(`Total movement of all accounts: ${allMovements}`);\n\n\n// // using .flapMap() to combine .flat() and .map() methods\n// // .flatMap() method has depth always set to 1\n// const totalMovements = accounts\n//     .flatMap(acc => acc.movements)\n//     .reduce((acc, mov) => acc + mov, 0);\n// console.log(`Total movement of all accounts: ${totalMovements}`); \n\n\n// more uses of Array.from() function\n// we can produce arrays from array-like iterables such as .querySelectorAll()  nodeLists by using Array.from() function\n\nlabelBalance.addEventListener('click', ()=>{\n  const movementsUI = Array.from(document.querySelectorAll('.movements__value'), (element) => Number(element.textContent.replace('€', '')));\n  console.log(movementsUI.reduce((acc, cur) => acc + cur, 0));\n\n  // u can also use the spread method\n  const movementsUI2 = [...document.querySelectorAll('.movements__value')];\n  console.log(movementsUI2.map(element => Number(element.textContent.replace('€', ''))));\n});\n"],"names":["account1","owner","movements","interestRate","pin","account2","account3","account4","accounts","labelWelcome","document","querySelector","labelDate","labelBalance","labelSumIn","labelSumOut","labelSumInterest","labelTimer","containerApp","containerMovements","btnLogin","btnTransfer","btnLoan","btnClose","btnSort","inputLoginUsername","inputLoginPin","inputTransferTo","inputTransferAmount","inputLoanAmount","inputCloseUsername","inputClosePin","forEach","account","username","toLowerCase","split","map","item","join","displayMovements","sort","innerHTML","slice","a","b","mov","i","type","html","insertAdjacentHTML","calcDisplayBalance","acc","balance","reduce","arr","textContent","calcDisplaySummary","incomes","filter","out","Math","abs","interest","deposit","int","updateUI","currentAccount","addEventListener","event","preventDefault","find","value","Number","style","opacity","blur","e","receiverAcc","amount","push","loanValue","some","index","findIndex","console","log","splice","checkSort","currencies","Map","movementsUI","Array","from","querySelectorAll","element","replace","cur","movementsUI2"],"version":3,"file":"index.335a83eb.js.map"}